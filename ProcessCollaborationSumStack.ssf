############################################
# Script for Siril 1.0
# 23 October 2023
# ProcessCollaborationSumStack v1.0
#
########### COLLABORATION PROJECT STACKING SCRIPT ###########
# Script to stack data submitted for NOVAC imaging collaboration project.
# Uses the 'sum' methodology to optimize for speed over quality.
#
# Store the script file in your preferred Siril scripts directory
#
# Input data should be in a directory structure like this
# <root>
#   ProjectDir
#      Person01
#         Ha
#            <calibrated .fit files>
#         O3
#            <calibrated .fit files>
#         S2
#         Red
#         Green
#         Blue
#      Person02
#         ...
#
# Calibrated .fit files from each person go into the appropriate filter directory
#
# The script will create ProjectDir/process to hold temp files (can be deleted)
#
# The script will create ProjectDir/0_Masters and a subdirectory for each filter
# It will also create ProjectDir/0_Masters/process to hold temp files (can be deleted)
#
# Integrations by each person by each filter, and cumulative for each filter, are created
# in the ProjectDir/0_Masters/<color> directories
#
# To run the script, launch Siril and change the working directory to ProjectDir.
# From the Scripts menu, select ProcessCollaboration
# 
# Future enhancements could include:
#   Write a DOS batch file to call script and then clean up the process directory
#   Break this script into smaller scripts (one per person) and chain together with DOS batch file
#
############################################

requires 1.2.0

############################################
# Copy this block for each person, change the sequence names to match
#
# preprocess Chris
# Change the directory name as needed to accommodate new people
cd Chris
set16bits

# Each sequence needs a unique name, so change "ChrisHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert ChrisHa -out=../../process
cd ..

cd O3
convert ChrisO3 -out=../../process
cd ..

cd S2
convert ChrisS2 -out=../../process
cd ..

# cd Red
# convert ChrisRed -out=../../process
# cd ..

# cd Green
# convert ChrisGreen -out=../../process
# cd ..

# cd Blue
# convert ChrisBlue -out=../../process
# cd ..

# cd OSC
# convert ChrisOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align Chris' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_ChrisHa, r_ChrisO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register ChrisHa -drizzle -maxstars=100 -interp=ne
register ChrisO3 -drizzle -maxstars=100 -interp=ne
register ChrisS2 -drizzle -maxstars=100 -interp=ne
# register ChrisRed -drizzle -maxstars=100 -interp=ne
# register ChrisGreen -drizzle -maxstars=100 -interp=ne
# register ChrisBlue -drizzle -maxstars=100 -interp=ne
# register ChrisOSC -drizzle -maxstars=100 -interp=ne

# stack Chris' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_ChrisHa sum -out=../0_Masters/Ha/ChrisHa
stack r_ChrisO3 sum -out=../0_Masters/O3/ChrisO3
stack r_ChrisS2 sum -out=../0_Masters/S2/ChrisS2
# stack r_ChrisRed sum -out=../0_Masters/Red/ChrisRed
# stack r_ChrisGreen sum -out=../0_Masters/Green/ChrisGreen
# stack r_ChrisBlue sum -out=../0_Masters/Blue/ChrisBlue
# stack r_ChrisOSC sum -out=../0_Masters/OSC/ChrisOSC

# go up to project directory to do next person
cd ..

######################################################################
# End block to be copied for each person
###################################################################


#######################
# Process ChrisSV's files
#######################
# Change the directory name as needed to accommodate new people
cd ChrisSV
set16bits

# Each sequence needs a unique name, so change "ChrisHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

#cd Ha
#convert ChrisSVHa -out=../../process
#cd ..

cd O3
convert ChrisSVO3 -out=../../process
cd ..

cd S2
convert ChrisSVS2 -out=../../process
cd ..

# cd Red
# convert ChrisSVRed -out=../../process
# cd ..

# cd Green
# convert ChrisSVGreen -out=../../process
# cd ..

# cd Blue
# convert ChrisSVBlue -out=../../process
# cd ..

# cd OSC
# convert ChrisSVOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align ChrisSV data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_ChrisHa, r_ChrisO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

#register ChrisSVHa -maxstars=100 -interp=ne
register ChrisSVO3 -maxstars=100 -interp=ne
register ChrisSVS2 -maxstars=100 -interp=ne
# register ChrisSVRed -maxstars=100 -interp=ne
# register ChrisSVGreen -maxstars=100 -interp=ne
# register ChrisSVBlue -maxstars=100 -interp=ne
# register ChrisSVOSC -maxstars=100 -interp=ne

# stack ChrisSV' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
#stack r_ChrisSVHa sum -out=../0_Masters/Ha/ChrisSVHa
stack r_ChrisSVO3 sum -out=../0_Masters/O3/ChrisSVO3
stack r_ChrisSVS2 sum -out=../0_Masters/S2/ChrisSVS2
# stack r_ChrisSVRed sum -out=../0_Masters/Red/ChrisSVRed
# stack r_ChrisSVGreen sum -out=../0_Masters/Green/ChrisSVGreen
# stack r_ChrisSVBlue sum -out=../0_Masters/Blue/ChrisSVBlue
# stack r_ChrisSVOSC sum -out=../0_Masters/OSC/ChrisSVOSC

# go up to project directory to do next person
cd ..



#############################
# preprocess Texas
# Change the directory name as needed to accommodate new people
cd Texas
set16bits

# Each sequence needs a unique name, so change "ChrisHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert TexasHa -out=../../process
cd ..

cd O3
convert TexasO3 -out=../../process
cd ..

cd S2
convert TexasS2 -out=../../process
cd ..

# cd Red
# convert TexasRed -out=../../process
# cd ..

# cd Green
# convert TexasGreen -out=../../process
# cd ..

# cd Blue
# convert TexasBlue -out=../../process
# cd ..

# cd OSC
# convert TexasOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align Texas' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_TexasHa, r_TexasO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register TexasHa -maxstars=100 -interp=ne
register TexasO3 -maxstars=100 -interp=ne
register TexasS2 -maxstars=100 -interp=ne
# register TexasRed -maxstars=100 -interp=ne
# register TexasGreen -maxstars=100 -interp=ne
# register TexasBlue -maxstars=100 -interp=ne
# register TexasOSC -maxstars=100 -interp=ne

# stack Texas' data. Change the comment marks to enable or disable appropriate filters
set32bits
stack r_TexasHa sum -out=../0_Masters/Ha/TexasHa
stack r_TexasO3 sum -out=../0_Masters/O3/TexasO3
stack r_TexasS2 sum -out=../0_Masters/S2/TexasS2
# stack r_TexasRed sum -out=../0_Masters/Red/TexasRed
# stack r_TexasGreen sum -out=../0_Masters/Green/TexasGreen
# stack r_TexasBlue sum -out=../0_Masters/Blue/TexasBlue
# stack r_TexasOSC sum -out=../0_Masters/OSC/TexasOSC

# go up to project directory to do next person
cd ..


#######################
# Process Linda-TOA130-ASI6200's files
#######################
# Change the directory name as needed to accommodate new people
cd Linda-TOA130-ASI6200
set16bits

# Each sequence needs a unique name, so change "ChrisHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert Linda-TOA130-ASI6200Ha -out=../../process
cd ..

cd O3
convert Linda-TOA130-ASI6200O3 -out=../../process
cd ..

cd S2
convert Linda-TOA130-ASI6200S2 -out=../../process
cd ..

# cd Red
# convert Linda-TOA130-ASI6200Red -out=../../process
# cd ..

# cd Green
# convert Linda-TOA130-ASI6200Green -out=../../process
# cd ..

# cd Blue
# convert Linda-TOA130-ASI6200Blue -out=../../process
# cd ..

# cd OSC
# convert Linda-TOA130-ASI6200OSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align Linda-TOA130-ASI6200 data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_ChrisHa, r_ChrisO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register Linda-TOA130-ASI6200Ha -maxstars=100 -interp=ne
register Linda-TOA130-ASI6200O3 -maxstars=100 -interp=ne
register Linda-TOA130-ASI6200S2 -maxstars=100 -interp=ne
# register Linda-TOA130-ASI6200Red -maxstars=100 -interp=ne
# register Linda-TOA130-ASI6200Green -maxstars=100 -interp=ne
# register Linda-TOA130-ASI6200Blue -maxstars=100 -interp=ne
# register Linda-TOA130-ASI6200OSC -maxstars=100 -interp=ne

# stack Linda-TOA130-ASI6200' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_Linda-TOA130-ASI6200Ha sum -out=../0_Masters/Ha/Linda-TOA130-ASI6200Ha
stack r_Linda-TOA130-ASI6200O3 sum -out=../0_Masters/O3/Linda-TOA130-ASI6200O3
stack r_Linda-TOA130-ASI6200S2 sum -out=../0_Masters/S2/Linda-TOA130-ASI6200S2
# stack r_Linda-TOA130-ASI6200Red sum -out=../0_Masters/Red/Linda-TOA130-ASI6200Red
# stack r_Linda-TOA130-ASI6200Green sum -out=../0_Masters/Green/Linda-TOA130-ASI6200Green
# stack r_Linda-TOA130-ASI6200Blue sum -out=../0_Masters/Blue/Linda-TOA130-ASI6200Blue
# stack r_Linda-TOA130-ASI6200OSC sum -out=../0_Masters/OSC/Linda-TOA130-ASI6200OSC

# go up to project directory to do next person
cd ..


#######################
# Process Linda-TOA130-QHY268M's files
#######################
# Change the directory name as needed to accommodate new people
cd Linda-TOA130-QHY268M
set16bits

# Each sequence needs a unique name, so change "ChrisHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert Linda-TOA130-QHY268MHa -out=../../process
cd ..

cd O3
convert Linda-TOA130-QHY268MO3 -out=../../process
cd ..

cd S2
convert Linda-TOA130-QHY268MS2 -out=../../process
cd ..

# cd Red
# convert Linda-TOA130-QHY268MRed -out=../../process
# cd ..

# cd Green
# convert Linda-TOA130-QHY268MGreen -out=../../process
# cd ..

# cd Blue
# convert Linda-TOA130-QHY268MBlue -out=../../process
# cd ..

# cd OSC
# convert Linda-TOA130-QHY268MOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align Linda-TOA130-QHY268M data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_ChrisHa, r_ChrisO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register Linda-TOA130-QHY268MHa -maxstars=100 -interp=ne
register Linda-TOA130-QHY268MO3 -maxstars=100 -interp=ne
register Linda-TOA130-QHY268MS2 -maxstars=100 -interp=ne
# register Linda-TOA130-QHY268MRed -maxstars=100 -interp=ne
# register Linda-TOA130-QHY268MGreen -maxstars=100 -interp=ne
# register Linda-TOA130-QHY268MBlue -maxstars=100 -interp=ne
# register Linda-TOA130-QHY268MOSC -maxstars=100 -interp=ne

# stack Linda-TOA130-QHY268M' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_Linda-TOA130-QHY268MHa sum -out=../0_Masters/Ha/Linda-TOA130-QHY268MHa
stack r_Linda-TOA130-QHY268MO3 sum -out=../0_Masters/O3/Linda-TOA130-QHY268MO3
stack r_Linda-TOA130-QHY268MS2 sum -out=../0_Masters/S2/Linda-TOA130-QHY268MS2
# stack r_Linda-TOA130-QHY268MRed sum -out=../0_Masters/Red/Linda-TOA130-QHY268MRed
# stack r_Linda-TOA130-QHY268MGreen sum -out=../0_Masters/Green/Linda-TOA130-QHY268MGreen
# stack r_Linda-TOA130-QHY268MBlue sum -out=../0_Masters/Blue/Linda-TOA130-QHY268MBlue
# stack r_Linda-TOA130-QHY268MOSC sum -out=../0_Masters/OSC/Linda-TOA130-QHY268MOSC

# go up to project directory to do next person
cd ..


############################################
# preprocess JuanSV
# Change the directory name as needed to accommodate new people
cd JuanSV
set16bits

# Each sequence needs a unique name, so change "JuanSVHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert JuanSVHa -out=../../process
cd ..

cd O3
convert JuanSVO3 -out=../../process
cd ..

cd S2
convert JuanSVS2 -out=../../process
cd ..

# cd Red
# convert JuanSVRed -out=../../process
# cd ..

# cd Green
# convert JuanSVGreen -out=../../process
# cd ..

# cd Blue
# convert JuanSVBlue -out=../../process
# cd ..

# cd OSC
# convert JuanSVOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align JuanSV' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_JuanSVHa, r_JuanSVO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register JuanSVHa -maxstars=100 -interp=ne
register JuanSVO3 -maxstars=100 -interp=ne
register JuanSVS2 -maxstars=100 -interp=ne
# register JuanSVRed -maxstars=100 -interp=ne
# register JuanSVGreen -maxstars=100 -interp=ne
# register JuanSVBlue -maxstars=100 -interp=ne
# register JuanSVOSC -maxstars=100 -interp=ne

# stack JuanSV' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_JuanSVHa sum -out=../0_Masters/Ha/JuanSVHa
stack r_JuanSVO3 sum -out=../0_Masters/O3/JuanSVO3
stack r_JuanSVS2 sum -out=../0_Masters/S2/JuanSVS2
# stack r_JuanSVRed sum -out=../0_Masters/Red/JuanSVRed
# stack r_JuanSVGreen sum -out=../0_Masters/Green/JuanSVGreen
# stack r_JuanSVBlue sum -out=../0_Masters/Blue/JuanSVBlue
# stack r_JuanSVOSC sum -out=../0_Masters/OSC/JuanSVOSC

# go up to project directory to do next person
cd ..

######################################################################
# End process JuanSV
###################################################################

############################################
# preprocess SRO
# Change the directory name as needed to accommodate new people
cd SRO
set16bits

# Each sequence needs a unique name, so change "SROHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert SROHa -out=../../process
cd ..

cd O3
convert SROO3 -out=../../process
cd ..

cd S2
convert SROS2 -out=../../process
cd ..

# cd Red
# convert SRORed -out=../../process
# cd ..

# cd Green
# convert SROGreen -out=../../process
# cd ..

# cd Blue
# convert SROBlue -out=../../process
# cd ..

# cd OSC
# convert SROOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align SRO' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_SROHa, r_SROO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register SROHa -maxstars=100 -interp=ne
register SROO3 -maxstars=100 -interp=ne
register SROS2 -maxstars=100 -interp=ne
# register SRORed -maxstars=100 -interp=ne
# register SROGreen -maxstars=100 -interp=ne
# register SROBlue -maxstars=100 -interp=ne
# register SROOSC -maxstars=100 -interp=ne

# stack SRO' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_SROHa sum -out=../0_Masters/Ha/SROHa
stack r_SROO3 sum -out=../0_Masters/O3/SROO3
stack r_SROS2 sum -out=../0_Masters/S2/SROS2
# stack r_SRORed sum -out=../0_Masters/Red/SRORed
# stack r_SROGreen sum -out=../0_Masters/Green/SROGreen
# stack r_SROBlue sum -out=../0_Masters/Blue/SROBlue
# stack r_SROOSC sum -out=../0_Masters/OSC/SROOSC

# go up to project directory to do next person
cd ..

######################################################################
# End process SRO
###################################################################

############################################
# preprocess TexasRBI
# Change the directory name as needed to accommodate new people
cd TexasRBI
set16bits

# Each sequence needs a unique name, so change "TexasRBIHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert TexasRBIHa -out=../../process
cd ..

cd O3
convert TexasRBIO3 -out=../../process
cd ..

cd S2
convert TexasRBIS2 -out=../../process
cd ..

# cd Red
# convert TexasRBIRed -out=../../process
# cd ..

# cd Green
# convert TexasRBIGreen -out=../../process
# cd ..

# cd Blue
# convert TexasRBIBlue -out=../../process
# cd ..

# cd OSC
# convert TexasRBIOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align TexasRBI' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_TexasRBIHa, r_TexasRBIO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register TexasRBIHa -maxstars=100 -interp=ne
register TexasRBIO3 -maxstars=100 -interp=ne
register TexasRBIS2 -maxstars=100 -interp=ne
# register TexasRBIRed -maxstars=100 -interp=ne
# register TexasRBIGreen -maxstars=100 -interp=ne
# register TexasRBIBlue -maxstars=100 -interp=ne
# register TexasRBIOSC -maxstars=100 -interp=ne

# stack TexasRBI' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_TexasRBIHa sum -out=../0_Masters/Ha/TexasRBIHa
stack r_TexasRBIO3 sum -out=../0_Masters/O3/TexasRBIO3
stack r_TexasRBIS2 sum -out=../0_Masters/S2/TexasRBIS2
# stack r_TexasRBIRed sum -out=../0_Masters/Red/TexasRBIRed
# stack r_TexasRBIGreen sum -out=../0_Masters/Green/TexasRBIGreen
# stack r_TexasRBIBlue sum -out=../0_Masters/Blue/TexasRBIBlue
# stack r_TexasRBIOSC sum -out=../0_Masters/OSC/TexasRBIOSC

# go up to project directory to do next person
cd ..

######################################################################
# End process TexasRBI
###################################################################

############################################
# preprocess SRORBI
# Change the directory name as needed to accommodate new people
cd SRORBI
set16bits

# Each sequence needs a unique name, so change "SRORBIHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert SRORBIHa -out=../../process
cd ..

cd O3
convert SRORBIO3 -out=../../process
cd ..

cd S2
convert SRORBIS2 -out=../../process
cd ..

# cd Red
# convert SRORBIRed -out=../../process
# cd ..

# cd Green
# convert SRORBIGreen -out=../../process
# cd ..

# cd Blue
# convert SRORBIBlue -out=../../process
# cd ..

# cd OSC
# convert SRORBIOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align SRORBI' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_SRORBIHa, r_SRORBIO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register SRORBIHa -maxstars=100 -interp=ne
register SRORBIO3 -maxstars=100 -interp=ne
register SRORBIS2 -maxstars=100 -interp=ne
# register SRORBIRed -maxstars=100 -interp=ne
# register SRORBIGreen -maxstars=100 -interp=ne
# register SRORBIBlue -maxstars=100 -interp=ne
# register SRORBIOSC -maxstars=100 -interp=ne

# stack SRORBI' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_SRORBIHa sum -out=../0_Masters/Ha/SRORBIHa
stack r_SRORBIO3 sum -out=../0_Masters/O3/SRORBIO3
stack r_SRORBIS2 sum -out=../0_Masters/S2/SRORBIS2
# stack r_SRORBIRed sum -out=../0_Masters/Red/SRORBIRed
# stack r_SRORBIGreen sum -out=../0_Masters/Green/SRORBIGreen
# stack r_SRORBIBlue sum -out=../0_Masters/Blue/SRORBIBlue
# stack r_SRORBIOSC sum -out=../0_Masters/OSC/SRORBIOSC

# go up to project directory to do next person
cd ..

######################################################################
# End process SRORBI
###################################################################


#############################
# preprocess GowriOS
# Change the directory name as needed to accommodate new people
cd GowriOS330
set16bits

# Each sequence needs a unique name, so change "ChrisHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert GowriOS330Ha -out=../../process
cd ..

cd O3
convert GowriOS330O3 -out=../../process
cd ..

cd S2
convert GowriOS330S2 -out=../../process
cd ..

# cd Red
# convert GowriOS330Red -out=../../process
# cd ..

# cd Green
# convert GowriOS330Green -out=../../process
# cd ..

# cd Blue
# convert GowriOS330Blue -out=../../process
# cd ..

# cd OSC
# convert GowriOS330OSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align GowriOS330' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_GowriOS330Ha, r_GowriOS330O3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register GowriOS330Ha -maxstars=100 -interp=ne
register GowriOS330O3 -maxstars=100 -interp=ne
register GowriOS330S2 -maxstars=100 -interp=ne
# register GowriOS330Red -maxstars=100 -interp=ne
# register GowriOS330Green -maxstars=100 -interp=ne
# register GowriOS330Blue -maxstars=100 -interp=ne
# register GowriOS330OSC -maxstars=100 -interp=ne

# stack GowriOS330' data. Change the comment marks to enable or disable appropriate filters
set32bits
stack r_GowriOS330Ha sum -out=../0_Masters/Ha/GowriOS330Ha
stack r_GowriOS330O3 sum -out=../0_Masters/O3/GowriOS330O3
stack r_GowriOS330S2 sum -out=../0_Masters/S2/GowriOS330S2
# stack r_GowriOS330Red sum -out=../0_Masters/Red/GowriOS330Red
# stack r_GowriOS330Green sum -out=../0_Masters/Green/GowriOS330Green
# stack r_GowriOS330Blue sum -out=../0_Masters/Blue/GowriOS330Blue
# stack r_GowriOS330OSC sum -out=../0_Masters/OSC/GowriOS330OSC

# go up to project directory to do next person
cd ..

######
# End process GowriOS330
######

############################################
# preprocess GowriAP92
# Change the directory name as needed to accommodate new people
cd GowriAP92
set16bits

# Each sequence needs a unique name, so change "GowriAP92Ha" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert GowriAP92Ha -out=../../process
cd ..

cd O3
convert GowriAP92O3 -out=../../process
cd ..

cd S2
convert GowriAP92S2 -out=../../process
cd ..

# cd Red
# convert GowriAP92Red -out=../../process
# cd ..

# cd Green
# convert GowriAP92Green -out=../../process
# cd ..

# cd Blue
# convert GowriAP92Blue -out=../../process
# cd ..

# cd OSC
# convert GowriAP92OSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align GowriAP92' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_GowriAP92Ha, r_GowriAP92O3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register GowriAP92Ha -maxstars=100 -interp=ne
register GowriAP92O3 -maxstars=100 -interp=ne
register GowriAP92S2 -maxstars=100 -interp=ne
# register GowriAP92Red -maxstars=100 -interp=ne
# register GowriAP92Green -maxstars=100 -interp=ne
# register GowriAP92Blue -maxstars=100 -interp=ne
# register GowriAP92OSC -maxstars=100 -interp=ne

# stack GowriAP92' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_GowriAP92Ha sum -out=../0_Masters/Ha/GowriAP92Ha
stack r_GowriAP92O3 sum -out=../0_Masters/O3/GowriAP92O3
stack r_GowriAP92S2 sum -out=../0_Masters/S2/GowriAP92S2
# stack r_GowriAP92Red sum -out=../0_Masters/Red/GowriAP92Red
# stack r_GowriAP92Green sum -out=../0_Masters/Green/GowriAP92Green
# stack r_GowriAP92Blue sum -out=../0_Masters/Blue/GowriAP92Blue
# stack r_GowriAP92OSC sum -out=../0_Masters/OSC/GowriAP92OSC

# go up to project directory to do next person
cd ..

######################################################################
# End process GowriAP92
###################################################################

############################################
# preprocess BlaineHyper
# Change the directory name as needed to accommodate new people
cd BlaineHyper
set16bits

# Each sequence needs a unique name, so change "BlaineHyperHa" as needed for new people or for appropriate filter.
# For example, if Chris provides Blue filter data, create a convert statement with sequence ChrisBlue

cd Ha
convert BlaineHyperHa -out=../../process
cd ..

cd O3
convert BlaineHyperO3 -out=../../process
cd ..

cd S2
convert BlaineHyperS2 -out=../../process
cd ..

# cd Red
# convert BlaineHyperRed -out=../../process
# cd ..

# cd Green
# convert BlaineHyperGreen -out=../../process
# cd ..

# cd Blue
# convert BlaineHyperBlue -out=../../process
# cd ..

# cd OSC
# convert BlaineHyperOSC -out=../../process
# cd ..


# switch to the process directory for the rest of the steps
cd ../process

# align BlaineHyper' data. Add other register commands as needed to accommodate additional filters
# Will automatically create new sequence called r_BlaineHyperHa, r_BlaineHyperO3, etc
# Change the comment marks to enable or disable appropriate filters for each person

register BlaineHyperHa -maxstars=100 -interp=ne
register BlaineHyperO3 -maxstars=100 -interp=ne
register BlaineHyperS2 -maxstars=100 -interp=ne
# register BlaineHyperRed -maxstars=100 -interp=ne
# register BlaineHyperGreen -maxstars=100 -interp=ne
# register BlaineHyperBlue -maxstars=100 -interp=ne
# register BlaineHyperOSC -maxstars=100 -interp=ne

# stack BlaineHyper' data. Change the comment marks to enable or disable appropriate filters
# change the OUTPUT DIRECTORY names and the SEQUENCE NAMES on each command for a new person

set32bits
stack r_BlaineHyperHa sum -out=../0_Masters/Ha/BlaineHyperHa
stack r_BlaineHyperO3 sum -out=../0_Masters/O3/BlaineHyperO3
stack r_BlaineHyperS2 sum -out=../0_Masters/S2/BlaineHyperS2
# stack r_BlaineHyperRed sum -out=../0_Masters/Red/BlaineHyperRed
# stack r_BlaineHyperGreen sum -out=../0_Masters/Green/BlaineHyperGreen
# stack r_BlaineHyperBlue sum -out=../0_Masters/Blue/BlaineHyperBlue
# stack r_BlaineHyperOSC sum -out=../0_Masters/OSC/BlaineHyperOSC

# go up to project directory to do next person
cd ..

######################################################################
# End process BlaineHyper
###################################################################

############################
# Now stack all the filters together
############################

# Create initial sequences for each filter
# Remove comments on Red, Green, Blue, OSC as soon as we have contributions
#set16bits
#cd 0_Masters
#cd Ha
#convert Ha -out=../process
#cd ..
#cd O3
#convert O3 -out=../process
#cd ..
#cd S2
#convert S2 -out=../process
#cd ..

#cd Red
#convert Red -out=../process
#cd ..
#cd Green
#convert Green -out=../process
#cd ..
#cd Blue
#convert Blue -out=../process
#cd ..
#cd OSC
#convert OSC -out=../process
#cd ..



# Align
# Uncomment Red, Green, Blue, OSC as soon as we have contributions
cd process
#register Ha -maxstars=500
#register O3 -maxstars=500
#register S2 -maxstars=500
#register Red -maxstars=500
#register Green -maxstars=500
#register Blue -maxstars=500
#register OSC -maxstars=500

# stack
# Uncomment Red, Green, Blue, OSC as soon as we have contributions
set32bits
#stack r_Ha sum -out=../Ha/MasterHa
#stack r_O3 sum -out=../O3/MasterO3
#stack r_S2 sum -out=../S2/MasterS2
#stack r_Red sum -out=../Red/MasterRed
#stack r_Green sum -out=../Green/MasterGreen
#stack r_Blue sum -out=../Blue/MasterBlue
#stack r_OSC sum -out=../OSC/MasterOSC

# go back to ProjectDir
#cd ..
#cd ..


close
